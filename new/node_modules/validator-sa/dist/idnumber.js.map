{"version":3,"sources":["../src/idnumber.js"],"names":["normalizeIDNumber","v","replace","substrAsNumber","start","howMany","s","Number","substr","has13Characters","length","checkDigit","R","pipe","split","map","d","reverse","arr","ix","reduce","memo","sum","startsWithIDNumberBirthdate","allPass","gte","lastDigitIsValidCheckDigit","splitAt","init","last","isValidCitizenOrResident","gt","is12thDigit8","equals","validatorsAndErrorMessages","isValidSouthAfricanIDNumber","compose","normalizeSouthAfricanIDNumber","getValidationErrors","errors","normalized","validator","message","push"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,CAAC;AAAA,SAAIA,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAT;AAAA,CAA3B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,OAAR;AAAA,SAAoB,UAAAC,CAAC;AAAA,WAAIA,CAAC,IAAIC,MAAM,CAACD,CAAC,CAACE,MAAF,CAASJ,KAAT,EAAgBC,OAAhB,CAAD,CAAf;AAAA,GAArB;AAAA,CAAvB;;AAEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAAR,CAAC;AAAA,SAAIA,CAAC,IAAIA,CAAC,CAACS,MAAF,KAAa,EAAtB;AAAA,CAAzB;;AAEA,IAAMC,UAAU,GAAGC,CAAC,CAACC,IAAF,CACjB,UAAAP,CAAC;AAAA,SAAIA,CAAC,CAACJ,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBY,KAArB,CAA2B,EAA3B,EAA+BC,GAA/B,CAAmC,UAAAC,CAAC;AAAA,WAAIT,MAAM,CAACS,CAAD,CAAV;AAAA,GAApC,CAAJ;AAAA,CADgB,EAEjBJ,CAAC,CAACK,OAFe,EAGjB,UAAAC,GAAG;AAAA,SAAIA,GAAG,CAACH,GAAJ,CAAQ,UAACC,CAAD,EAAIG,EAAJ,EAAW;AACxB,QAAIA,EAAE,GAAG,CAAL,KAAW,CAAf,EAAkB;AAChBH,MAAAA,CAAC,IAAI,CAAL;;AACA,UAAIA,CAAC,GAAG,CAAR,EAAW;AACTA,QAAAA,CAAC,IAAI,CAAL;AACD;AACF;;AACD,WAAOA,CAAP;AACD,GARM,EAQJI,MARI,CAQG,UAACC,IAAD,EAAOL,CAAP;AAAA,WAAaK,IAAI,IAAIL,CAArB;AAAA,GARH,EAQ2B,CAR3B,CAAJ;AAAA,CAHc,EAYjB,UAAAM,GAAG;AAAA,SAAIA,GAAG,GAAG,CAAN,GAAU,EAAd;AAAA,CAZc,CAAnB;AAeA,IAAMC,2BAA2B,GAAGX,CAAC,CAACY,OAAF,CAAU,CAC5CZ,CAAC,CAACC,IAAF,CAAOV,cAAc,CAAC,CAAD,EAAI,CAAJ,CAArB,EAA6BS,CAAC,CAACa,GAAF,CAAM,EAAN,CAA7B,CAD4C,EAE5Cb,CAAC,CAACC,IAAF,CAAOV,cAAc,CAAC,CAAD,EAAI,CAAJ,CAArB,EAA6BS,CAAC,CAACa,GAAF,CAAM,EAAN,CAA7B,CAF4C,CAAV,CAApC;AAKO,IAAMC,0BAA0B,GAAGd,CAAC,CAACC,IAAF,CACxCD,CAAC,CAACe,OAAF,CAAU,CAAC,CAAX,CADwC,EAExC;AAAA;AAAA,MAAGC,IAAH;AAAA,MAASC,IAAT;;AAAA,SAAoBtB,MAAM,CAACsB,IAAD,CAAN,KAAiBlB,UAAU,CAACiB,IAAD,CAA/C;AAAA,CAFwC,CAAnC;;AAKP,IAAME,wBAAwB,GAAGlB,CAAC,CAACC,IAAF,CAC/BV,cAAc,CAAC,EAAD,EAAK,CAAL,CADiB,EAE/BS,CAAC,CAACmB,EAAF,CAAK,CAAL,CAF+B,CAAjC;AAKA,IAAMC,YAAY,GAAGpB,CAAC,CAACC,IAAF,CACnBV,cAAc,CAAC,EAAD,EAAK,CAAL,CADK,EAEnBS,CAAC,CAACqB,MAAF,CAAS,CAAT,CAFmB,CAArB;AAIA,IAAMC,0BAA0B,GAAG,CACjC,CACEX,2BADF,EAC+B,2BAD/B,CADiC,EAIjC,CAAEG,0BAAF,EAA8B,4BAA9B,CAJiC,EAKjC,CAAEjB,eAAF,EAAmB,6BAAnB,CALiC,EAMjC,CAAEqB,wBAAF,EAA4B,iCAA5B,CANiC,EAOjC,CAAEE,YAAF,EAAgB,oCAAhB,CAPiC,CAAnC;AAUA;;;;;;;;;;;AAUO,IAAMG,2BAA2B,GAAGvB,CAAC,CAACwB,OAAF,CACzCxB,CAAC,CAACY,OAAF,CAAUU,0BAA0B,CAACnB,GAA3B,CAA+B;AAAA;AAAA,MAAEd,CAAF;;AAAA,SAASA,CAAT;AAAA,CAA/B,CAAV,CADyC,EACc;AACvDD,iBAFyC,CAApC;AAKP;;;;;;;;;AAMO,IAAMqC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAAApC,CAAC;AAAA,SAAIkC,2BAA2B,CAAClC,CAAD,CAA3B,GAAiCA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAAjC,GAAwD,EAA5D;AAAA,CAAvC;AAEP;;;;;;;;;AAKO,IAAMoC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAArC,CAAC,EAAI;AACtC,MAAI,CAACA,CAAL,EAAQ;AACN,WAAO,CAAE,gBAAF,CAAP;AACD;;AACD,MAAMsC,MAAM,GAAG,EAAf;AACA,MAAMC,UAAU,GAAGxC,iBAAiB,CAACC,CAAD,CAApC;AALsC;AAAA;AAAA;;AAAA;AAMtC,yBAAmCiC,0BAAnC,8HAA+D;AAAA;AAAA,UAAnDO,SAAmD;AAAA,UAAxCC,OAAwC;;AAC7D,UAAI,CAACD,SAAS,CAACD,UAAD,CAAd,EAA4B;AAC1BD,QAAAA,MAAM,CAACI,IAAP,CAAYD,OAAZ;AACD;AACF;AAVqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWtC,SAAOH,MAAP;AACD,CAZM","sourcesContent":["import * as R from 'ramda'\n\nconst normalizeIDNumber = v => v && v.replace(/\\D/g, '')\n\nconst substrAsNumber = (start, howMany) => s => s && Number(s.substr(start, howMany))\n\nconst has13Characters = v => v && v.length === 13\n\nconst checkDigit = R.pipe(\n  s => s.replace(/\\D/g, '').split('').map(d => Number(d)),\n  R.reverse,\n  arr => arr.map((d, ix) => {\n    if (ix % 2 === 0) {\n      d *= 2\n      if (d > 9) {\n        d -= 9\n      }\n    }\n    return d\n  }).reduce((memo, d) => memo += d, 0),\n  sum => sum * 9 % 10\n)\n\nconst startsWithIDNumberBirthdate = R.allPass([\n  R.pipe(substrAsNumber(2, 2), R.gte(12)),\n  R.pipe(substrAsNumber(4, 2), R.gte(31)),\n])\n\nexport const lastDigitIsValidCheckDigit = R.pipe(\n  R.splitAt(-1),\n  ([ init, last ]) => Number(last) === checkDigit(init)\n)\n\nconst isValidCitizenOrResident = R.pipe(\n  substrAsNumber(10, 1),\n  R.gt(2)\n)\n\nconst is12thDigit8 = R.pipe(\n  substrAsNumber(11, 1),\n  R.equals(8)\n)\nconst validatorsAndErrorMessages = [\n  [\n    startsWithIDNumberBirthdate, 'Not a valid date of birth'\n  ],\n  [ lastDigitIsValidCheckDigit, 'Check digit does not match'],\n  [ has13Characters, 'Does not have 13 characters'],\n  [ isValidCitizenOrResident, 'Is neither citizen nor resident'],\n  [ is12thDigit8, 'The 12th digit is required to be 8']\n]\n\n/**\n * Validates if the string given is an ID number.\n *\n * ## Testing\n *\n * If you need a fake ID number for testing, use\n * [this](https://chris927.github.io/generate-sa-idnumbers/).\n *\n * @param {string} idnumber - The idnumber to validate.\n */\nexport const isValidSouthAfricanIDNumber = R.compose(\n  R.allPass(validatorsAndErrorMessages.map(([v]) => v)), // take the validator, ignore the message\n  normalizeIDNumber\n)\n\n/**\n * Normalizes a string representing an ID number.\n *\n * TODO: currently, if the ID number is invalid, it normalizes it to an empty\n * string, not sure this is a good idea.\n */\nexport const normalizeSouthAfricanIDNumber = v => isValidSouthAfricanIDNumber(v) ? v.replace(/\\D/g, '') : ''\n\n/**\n * For a given value, determines a list of validation errors.\n * \n * @param {String} value\n */\nexport const getValidationErrors = v => {\n  if (!v) {\n    return [ 'No value given' ]\n  }\n  const errors = []\n  const normalized = normalizeIDNumber(v)\n  for (const [validator, message] of validatorsAndErrorMessages) {\n    if (!validator(normalized)) {\n      errors.push(message)\n    }\n  }\n  return errors\n}\n"],"file":"idnumber.js"}