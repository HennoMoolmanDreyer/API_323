"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValidationErrors = exports.normalizeSouthAfricanIDNumber = exports.isValidSouthAfricanIDNumber = exports.lastDigitIsValidCheckDigit = void 0;

var R = _interopRequireWildcard(require("ramda"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var normalizeIDNumber = function normalizeIDNumber(v) {
  return v && v.replace(/\D/g, '');
};

var substrAsNumber = function substrAsNumber(start, howMany) {
  return function (s) {
    return s && Number(s.substr(start, howMany));
  };
};

var has13Characters = function has13Characters(v) {
  return v && v.length === 13;
};

var checkDigit = R.pipe(function (s) {
  return s.replace(/\D/g, '').split('').map(function (d) {
    return Number(d);
  });
}, R.reverse, function (arr) {
  return arr.map(function (d, ix) {
    if (ix % 2 === 0) {
      d *= 2;

      if (d > 9) {
        d -= 9;
      }
    }

    return d;
  }).reduce(function (memo, d) {
    return memo += d;
  }, 0);
}, function (sum) {
  return sum * 9 % 10;
});
var startsWithIDNumberBirthdate = R.allPass([R.pipe(substrAsNumber(2, 2), R.gte(12)), R.pipe(substrAsNumber(4, 2), R.gte(31))]);
var lastDigitIsValidCheckDigit = R.pipe(R.splitAt(-1), function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      init = _ref2[0],
      last = _ref2[1];

  return Number(last) === checkDigit(init);
});
exports.lastDigitIsValidCheckDigit = lastDigitIsValidCheckDigit;
var isValidCitizenOrResident = R.pipe(substrAsNumber(10, 1), R.gt(2));
var is12thDigit8 = R.pipe(substrAsNumber(11, 1), R.equals(8));
var validatorsAndErrorMessages = [[startsWithIDNumberBirthdate, 'Not a valid date of birth'], [lastDigitIsValidCheckDigit, 'Check digit does not match'], [has13Characters, 'Does not have 13 characters'], [isValidCitizenOrResident, 'Is neither citizen nor resident'], [is12thDigit8, 'The 12th digit is required to be 8']];
/**
 * Validates if the string given is an ID number.
 *
 * ## Testing
 *
 * If you need a fake ID number for testing, use
 * [this](https://chris927.github.io/generate-sa-idnumbers/).
 *
 * @param {string} idnumber - The idnumber to validate.
 */

var isValidSouthAfricanIDNumber = R.compose(R.allPass(validatorsAndErrorMessages.map(function (_ref3) {
  var _ref4 = _slicedToArray(_ref3, 1),
      v = _ref4[0];

  return v;
})), // take the validator, ignore the message
normalizeIDNumber);
/**
 * Normalizes a string representing an ID number.
 *
 * TODO: currently, if the ID number is invalid, it normalizes it to an empty
 * string, not sure this is a good idea.
 */

exports.isValidSouthAfricanIDNumber = isValidSouthAfricanIDNumber;

var normalizeSouthAfricanIDNumber = function normalizeSouthAfricanIDNumber(v) {
  return isValidSouthAfricanIDNumber(v) ? v.replace(/\D/g, '') : '';
};
/**
 * For a given value, determines a list of validation errors.
 * 
 * @param {String} value
 */


exports.normalizeSouthAfricanIDNumber = normalizeSouthAfricanIDNumber;

var getValidationErrors = function getValidationErrors(v) {
  if (!v) {
    return ['No value given'];
  }

  var errors = [];
  var normalized = normalizeIDNumber(v);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validatorsAndErrorMessages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          validator = _step$value[0],
          message = _step$value[1];

      if (!validator(normalized)) {
        errors.push(message);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return errors;
};

exports.getValidationErrors = getValidationErrors;
//# sourceMappingURL=idnumber.js.map